unit UnitSmagorinsky;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls;

type
  TFormSmagorinsky = class(TForm)
    Panelmain: TPanel;
    CBcorrectnonuniformgrid: TCheckBox;
    CBSmagLilly: TCheckBox;
    GBsurfacerougnessparam: TGroupBox;
    BApply: TButton;
    GBSwirlDominatedFlow: TGroupBox;
    CBSwirlAmendment: TCheckBox;
    Panrougness: TPanel;
    LRoughness: TLabel;
    Eroughnessmicron: TEdit;
    Lroghness: TLabel;
    Lpower: TLabel;
    CBpowermodel: TComboBox;
    CBsurfaceroughness: TCheckBox;
    PanRichardson: TPanel;
    LRiMult: TLabel;
    ERimult: TEdit;
    GBSelectiveSmagorinsky: TGroupBox;
    CBSelectiveSmagorinsky: TCheckBox;
    PSelectiveSmag: TPanel;
    RGtypefiltr: TRadioGroup;
    LselectiveAngle: TLabel;
    Eangle: TEdit;
    Ldegree: TLabel;
    GBConstSmagorinsky: TGroupBox;
    PanelCs: TPanel;
    Lsmagconst: TLabel;
    Esmagconst: TEdit;
    CBDynamicStress: TCheckBox;
    PanelLimitersCs: TPanel;
    CBLimitersCs: TCheckBox;
    Panel_user_limiters: TPanel;
    LminCs: TLabel;
    LmaxCs: TLabel;
    RGtypefiltrGermanoModel: TRadioGroup;
    EminCs: TEdit;
    EmaxCs: TEdit;
    procedure BApplyClick(Sender: TObject);
    procedure CBsurfaceroughnessClick(Sender: TObject);
    procedure CBSwirlAmendmentClick(Sender: TObject);
    procedure CBSelectiveSmagorinskyClick(Sender: TObject);
    procedure CBDynamicStressClick(Sender: TObject);
    procedure CBLimitersCsClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormSmagorinsky: TFormSmagorinsky;

implementation
uses
     VisualUnit, UnitEQGD; // используем данные главного модуля.
{$R *.dfm}

procedure TFormSmagorinsky.BApplyClick(Sender: TObject);
begin
    // Задание пользователем свойств модели.
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].SmagConst:=StrToFloat(Esmagconst.Text); // постоянная Смагоринского.
    if (CBDynamicStress.Checked) then
    begin
       // модель Германо включена.
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iDynamicStressGermano:=1;
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].itypeFiltrGermano:=RGtypefiltrGermanoModel.ItemIndex; // тип фильтра который используется в модели Германо.
       if (CBLimitersCs.Checked) then
       begin
          // используется органичитель на константу Смагоринского.
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iLimitersCs:=1;
          // Ввод ограничивающих постоянную Смагоринского констант. Константы задаются
          // пользователем.
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].minCs:=StrToFloat(EminCs.Text);
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].maxCs:=StrToFloat(EmaxCs.Text);
       end
        else
       begin
          // Внимание ограничение на константу Смагоринского не используется,
          // отрицательные значения константы могут привести к расходимости солвера.
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iLimitersCs:=0;
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].minCs:=-1.0e20; // данные константы не являются ограничительными
          Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].maxCs:=1.0e23;
       end;
    end
     else
    begin
       // модель Германо выключена. Всё определяется значением константы Смагоринского.
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iDynamicStressGermano:=0;
       // мы не используем никаких ограничений на константу Смагоринского в случае когда
       // динамическая модель Германо не используется.
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iLimitersCs:=0;
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].minCs:=-1.0e20; // данные константы не являются ограничительными
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].maxCs:=1.0e23;
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].itypeFiltrGermano:=2; // фильтр Симпсона.
    end;
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].bfdelta:=CBcorrectnonuniformgrid.Checked; // учёт неравномерности сетки.
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].bSmagorinsky_Lilly:=CBSmagLilly.Checked; // Модель Смагоринского-Лиллу.
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].bsurface_roughness:=CBsurfaceroughness.Checked; // учёт шероховатости стенки.
    if (CBsurfaceroughness.Checked) then
    begin
       // задаём параметры шероховатости стенки.
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].roughness:=StrToFloat(Eroughnessmicron.Text); // шероховатость в мкм.
       case CBpowermodel.ItemIndex of
         0 : begin
                Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].ipowerroughness:=1;
             end;
         1 : begin
                Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].ipowerroughness:=2;
             end;
       end;
    end;
    // учёт течений с кривизной линий тока.
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].bSwirlamendment:=CBSwirlAmendment.Checked;
    if (CBSwirlAmendment.Checked) then
    begin
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].rRimult:=StrToFloat(ERimult.Text);
    end;
    // включение или выключение модели Selective Smagorinsky.
    Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].bSelectiveSmagorinsky:=CBSelectiveSmagorinsky.Checked;
    if (CBSelectiveSmagorinsky.Checked) then
    begin
       // тип используемого фильтра.
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].itypefiltr:=RGtypefiltr.ItemIndex;
       Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].rSelectiveAngle:=StrToFloat(Eangle.Text);
    end;
end;

// Снятие влажка учёта шероховатости.
procedure TFormSmagorinsky.CBsurfaceroughnessClick(Sender: TObject);
begin
   // поднятие или снятие флажка для учёта шероховатости.
   if (CBsurfaceroughness.Checked) then
   begin
      Panrougness.Visible:=true;
      Eroughnessmicron.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].roughness);
      case Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].ipowerroughness of
        1 : begin
               CBpowermodel.ItemIndex:=0;
            end;
        2 : begin
               CBpowermodel.ItemIndex:=1;
            end;
       end;
   end
    else
   begin
      Panrougness.Visible:=false;
   end;
end;

// Снятие или поднятие флажка на учёт течений с кривизной линий тока.
procedure TFormSmagorinsky.CBSwirlAmendmentClick(Sender: TObject);
begin
   // Снятие или установка флажка для учёта течения с кривизной линий тока.
   if (CBSwirlAmendment.Checked) then
   begin
      PanRichardson.Visible:=true;
      ERimult.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].rRimult);
   end
     else
   begin
      PanRichardson.Visible:=false;
   end;
end;

procedure TFormSmagorinsky.CBSelectiveSmagorinskyClick(Sender: TObject);
begin
   // Снятие или поднятие флажка включающую или выключающую
   // модель Selective Smagorinsky.
   if (CBSelectiveSmagorinsky.Checked) then
   begin
      PSelectiveSmag.Visible:=true;
      RGtypefiltr.ItemIndex:=Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].itypefiltr;
      Eangle.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].rSelectiveAngle);
   end
    else
   begin
      PSelectiveSmag.Visible:=false;
   end;
end;

// Активность или неактивность динамической модели.
procedure TFormSmagorinsky.CBDynamicStressClick(Sender: TObject);
begin
   // включение или выключение динамической модели
   if (CBDynamicStress.Checked) then
   begin
      // модель Германо включена.
      PanelCs.Visible:=false;
      PanelLimitersCs.Visible:=true;
      if (Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].iLimitersCs=0) then
      begin
         CBLimitersCS.Checked:=false;
         Panel_user_limiters.Visible:=false;
      end
       else
      begin
         CBLimitersCS.Checked:=true;
         // пределы Cs включены
         Panel_user_limiters.Visible:=true;
         EminCs.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].minCs);
         EmaxCs.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].maxCs);
      end;
   end
    else
   begin
      // модель Германо выключена.
      PanelCs.Visible:=true;
      Esmagconst.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].SmagConst);
      PanelLimitersCs.Visible:=false;
   end;
end;

// Активность или неактивность ограничителей константы Смагоринского.
procedure TFormSmagorinsky.CBLimitersCsClick(Sender: TObject);
begin
   // включение или выключение ограничителя константы Смагоринского.
   if (CBLimitersCS.Checked) then
   begin
      // пределы Cs включены
      Panel_user_limiters.Visible:=true;
      EminCs.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].minCs);
      EmaxCs.Text:=FloatToStr(Laplas.egddata.myflmod[EGDForm.CBIdCurFLzone.ItemIndex].maxCs);
   end
    else
   begin
      // пределы Cs выключены
      Panel_user_limiters.Visible:=false;
   end;
end;

end.
